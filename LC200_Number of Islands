class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        if (grid.empty())
            return 0;
        int height = grid.size();
        int width = grid[0].size();
        int ans = 0;
        for (int y = 0; y < height; y++)
            for (int x = 0; x < width; x++){
                ans += (int)grid[y][x] - 48; // adjust char to int: (int)'1' is 49, (int)'0' is 48
                dfs(grid, y, x, height, width);
            }
        return ans;
    }
    
    void dfs(vector<vector<char>>& grid, int y, int x, int height, int width){
        if (y < 0 || x < 0 || y >= height || x >= width || grid[y][x] == '0')    // boundary case 0<=x, y<=width-1,height-1
            return; 
        grid[y][x] = '0';
        dfs(grid, y + 1, x, height, width);
        dfs(grid, y - 1, x, height, width);
        dfs(grid, y, x + 1, height, width);
        dfs(grid, y, x - 1, height, width);
    }
};
