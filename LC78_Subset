class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> ans;
        vector<int> curr;
        for (int i = 0; i <= nums.size(); i++)    // i is the target number can be from 0 from numbers size.
            dfs(nums, i, 0, curr, ans);
        return ans;
    }
    // dfs function help to return the ans for each number choose
    void dfs(const vector<int>& nums, int n, int depth, vector<int>& curr, vector<vector<int>>& ans){
        if(curr.size() == n){
            ans.push_back(curr);
            return;
        }
        for(int j = depth; j < nums.size(); j++){
            curr.push_back(nums[j]);
            dfs(nums, n, j + 1, curr, ans);
            curr.pop_back();
        }
    }
};