class Solution{
public:
    int search(vector<int>& nums, int target){
        //corner case
        if(nums.empty()) return -1;
        // binary search
        int left = 0;
        int right = nums.size() - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target)
                return mid;
            // case 1: left subarray is rotated sorted array, the right subarray is a sorted array
            if (nums[mid] < nums[left]){
                if(nums[mid] < target && target <= nums[right])
                    left = mid + 1;
                else
                    right = mid - 1;
            }
            // case 2: right subarray is a rotated one
            else{
                if(nums[left] <= target && target < nums[mid])
                    right = mid - 1;
                else
                    left = mid + 1;
            }
        }
        return -1;
    }
};
// time complexity: O(logn), additional space complexity: O(1)